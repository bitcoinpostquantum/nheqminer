std::string ocl_code = //\"_mrb_(
"# 1 \"input.cl\"\n"
"# 1 \"<built-in>\" 1\n"
"# 1 \"<built-in>\" 3\n"
"# 340 \"<built-in>\" 3\n"
"# 1 \"<command line>\" 1\n"
"# 1 \"<built-in>\" 2\n"
"# 1 \"input.cl\" 2\n"
"# 1 \"./param.h\" 1\n"
"\n"
"\n"
"\n"
"\n"
"// Approximate log base 2 of number of elements in hash tables\n"
"\n"
"// Number of rows and slots is affected by this. 20 offers the best performance\n"
"// but occasionally misses ~1% of solutions.\n"
"\n"
"\n"
"// Setting this to 1 might make SILENTARMY faster, see TROUBLESHOOTING.md\n"
"\n"
"\n"
"// Make hash tables OVERHEAD times larger than necessary to store the average\n"
"// number of elements per row. The ideal value is as small as possible to\n"
"// reduce memory usage, but not too small or else elements are dropped from the\n"
"// hash tables.\n"
"//\n"
"// The actual number of elements per row is closer to the theoretical average\n"
"// (less variance) when 20 is small. So accordingly OVERHEAD can be\n"
"// smaller.\n"
"//\n"
"// Even (as opposed to odd) values of OVERHEAD sometimes significantly decrease\n"
"// performance as they cause VRAM channel conflicts.\n"
"\n"
"# 36 \"./param.h\"\n"
"\n"
"\n"
"\n"
"// Length of 1 element (slot) in bytes\n"
"\n"
"// Total size of hash table\n"
"\n"
"// Length of Zcash block header, nonce (part of header)\n"
"\n"
"// Offset of nTime in header\n"
"\n"
"// Length of nonce\n"
"\n"
"// Length of encoded representation of solution size\n"
"\n"
"// Solution size (1344 = 0x540) represented as a compact integer, in hex\n"
"\n"
"// Length of encoded solution (512 * 21 bits / 8 = 1344 bytes)\n"
"\n"
"// Last N_ZERO_BYTES of nonce must be zero due to my BLAKE2B optimization\n"
"\n"
"// Number of bytes Zcash needs out of Blake\n"
"\n"
"// Number of wavefronts per SIMD for the Blake kernel.\n"
"// Blake is ALU-bound (beside the atomic counter being incremented) so we need\n"
"// at least 2 wavefronts per SIMD to hide the 2-clock latency of integer\n"
"// instructions. 10 is the max supported by the hw.\n"
"\n"
"// Maximum number of solutions reported by kernel to host\n"
"\n"
"// Length of SHA256 target\n"
"\n"
"\n"
"// Optional features\n"
"//#undef ENABLE_DEBUG\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"// An (uncompressed) solution stores (1 << 9) 32-bit values\n"
"\n"
"typedef struct	sols_s\n"
"{\n"
    "uint	nr;\n"
    "uint	likely_invalids;\n"
    "uchar	valid[10];\n"
    "uint	values[10][(1 << 9)];\n"
"}		sols_t;\n"
"\n"
"# 2 \"input.cl\" 2\n"
"\n"
"\n"
"# 34 \"input.cl\"\n"
"\n"
"\n"
"__constant ulong blake_iv[] =\n"
"{\n"
    "0x6a09e667f3bcc908, 0xbb67ae8584caa73b,\n"
    "0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,\n"
    "0x510e527fade682d1, 0x9b05688c2b3e6c1f,\n"
    "0x1f83d9abfb41bd6b, 0x5be0cd19137e2179,\n"
"};\n"
"\n"
"\n"
"\n"
"\n"
"__kernel\n"
"void kernel_init_ht(__global char *ht)\n"
"{\n"
    "uint        tid = get_global_id(0);\n"
    "*(__global uint *)(ht + tid * ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 32) = 0;\n"
"}\n"
"\n"
"\n"
"# 79 \"input.cl\"\n"
"\n"
"uint ht_store(uint round, __global char *ht, uint i,\n"
        "ulong xi0, ulong xi1, ulong xi2, ulong xi3)\n"
"{\n"
    "uint		row;\n"
    "__global char       *p;\n"
    "uint                cnt;\n"
"\n"
"# 111 \"input.cl\"\n"
    "if (!(round % 2))\n"
	"row = (xi0 & 0xffff) | ((xi0 & 0xf00000) >> 4);\n"
    "else\n"
	"row = ((xi0 & 0xf0000) >> 0) |\n"
	    "((xi0 & 0xf00) << 4) | ((xi0 & 0xf00000) >> 12) |\n"
	    "((xi0 & 0xf) << 4) | ((xi0 & 0xf000) >> 12);\n"
"\n"
"\n"
"\n"
"    xi0 = (xi0 >> 16) | (xi1 << (64 - 16));\n"
    "xi1 = (xi1 >> 16) | (xi2 << (64 - 16));\n"
    "xi2 = (xi2 >> 16) | (xi3 << (64 - 16));\n"
    "p = ht + row * ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 32;\n"
    "cnt = atomic_inc((__global uint *)p);\n"
    "if (cnt >= ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9))\n"
        "return 1;\n"
    "p += cnt * 32 + (8 + ((round) / 2) * 4);\n"
    "// store \"i\" (always 4 bytes before Xi)\n"
    "*(__global uint *)(p - 4) = i;\n"
    "if (round == 0 || round == 1)\n"
      "{\n"
	"// store 24 bytes\n"
	"*(__global ulong *)(p + 0) = xi0;\n"
	"*(__global ulong *)(p + 8) = xi1;\n"
	"*(__global ulong *)(p + 16) = xi2;\n"
      "}\n"
    "else if (round == 2)\n"
      "{\n"
	"// store 20 bytes\n"
	"*(__global uint *)(p + 0) = xi0;\n"
	"*(__global ulong *)(p + 4) = (xi0 >> 32) | (xi1 << 32);\n"
	"*(__global ulong *)(p + 12) = (xi1 >> 32) | (xi2 << 32);\n"
      "}\n"
    "else if (round == 3)\n"
      "{\n"
	"// store 16 bytes\n"
	"*(__global uint *)(p + 0) = xi0;\n"
	"*(__global ulong *)(p + 4) = (xi0 >> 32) | (xi1 << 32);\n"
	"*(__global uint *)(p + 12) = (xi1 >> 32);\n"
      "}\n"
    "else if (round == 4)\n"
      "{\n"
	"// store 16 bytes\n"
	"*(__global ulong *)(p + 0) = xi0;\n"
	"*(__global ulong *)(p + 8) = xi1;\n"
      "}\n"
    "else if (round == 5)\n"
      "{\n"
	"// store 12 bytes\n"
	"*(__global ulong *)(p + 0) = xi0;\n"
	"*(__global uint *)(p + 8) = xi1;\n"
      "}\n"
    "else if (round == 6 || round == 7)\n"
      "{\n"
	"// store 8 bytes\n"
	"*(__global uint *)(p + 0) = xi0;\n"
	"*(__global uint *)(p + 4) = (xi0 >> 32);\n"
      "}\n"
    "else if (round == 8)\n"
      "{\n"
	"// store 4 bytes\n"
	"*(__global uint *)(p + 0) = xi0;\n"
      "}\n"
    "return 0;\n"
"}\n"
"\n"
"\n"
"# 186 \"input.cl\"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"__kernel __attribute__((reqd_work_group_size(64, 1, 1)))\n"
"void kernel_round0(__global ulong *blake_state, __global char *ht,\n"
        "__global uint *debug)\n"
"{\n"
    "uint                tid = get_global_id(0);\n"
    "ulong               v[16];\n"
    "uint                inputs_per_thread = (1 << (200 / (9 + 1))) / get_global_size(0);\n"
    "uint                input = tid * inputs_per_thread;\n"
    "uint                input_end = (tid + 1) * inputs_per_thread;\n"
    "uint                dropped = 0;\n"
    "while (input < input_end)\n"
      "{\n"
        "// shift \"i\" to occupy the high 32 bits of the second ulong word in the\n"
        "// message block\n"
        "ulong word1 = (ulong)input << 32;\n"
        "// init vector v\n"
        "v[0] = blake_state[0];\n"
        "v[1] = blake_state[1];\n"
        "v[2] = blake_state[2];\n"
        "v[3] = blake_state[3];\n"
        "v[4] = blake_state[4];\n"
        "v[5] = blake_state[5];\n"
        "v[6] = blake_state[6];\n"
        "v[7] = blake_state[7];\n"
        "v[8] =  blake_iv[0];\n"
        "v[9] =  blake_iv[1];\n"
        "v[10] = blake_iv[2];\n"
        "v[11] = blake_iv[3];\n"
        "v[12] = blake_iv[4];\n"
        "v[13] = blake_iv[5];\n"
        "v[14] = blake_iv[6];\n"
        "v[15] = blake_iv[7];\n"
        "// mix in length of data\n"
        "v[12] ^= 140 + 4 ;\n"
        "// last block\n"
        "v[14] ^= (ulong)-1;\n"
"\n"
        "// round 1\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  word1);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 2\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  word1);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 3\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  word1);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 4\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  word1);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 5\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  word1);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 6\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  word1);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 7\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  word1);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 8\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  word1);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 9\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  word1);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 10\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  word1);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 11\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  word1);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
        "// round 12\n"
        "v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 32);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 24); v[0] = (v[0] +  v[4] +  0);   v[12] = rotate((  v[12] ^ v[0]), (ulong)64 - 16);  v[8] = ( v[8] +   v[12]);  v[4] = rotate(( v[4] ^  v[8]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 32);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 24); v[1] = (v[1] +  v[5] +  0);   v[13] = rotate((  v[13] ^ v[1]), (ulong)64 - 16);  v[9] = ( v[9] +   v[13]);  v[5] = rotate(( v[5] ^  v[9]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 32);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 24); v[2] = (v[2] +  v[6] +  0);  v[14] = rotate(( v[14] ^ v[2]), (ulong)64 - 16);  v[10] = ( v[10] +  v[14]);  v[6] = rotate(( v[6] ^  v[10]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 32);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 24); v[3] = (v[3] +  v[7] +  0);  v[15] = rotate(( v[15] ^ v[3]), (ulong)64 - 16);  v[11] = ( v[11] +  v[15]);  v[7] = rotate(( v[7] ^  v[11]), (ulong)64 - 63);;\n"
        "v[0] = (v[0] +  v[5] +  word1);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 32);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 24); v[0] = (v[0] +  v[5] +  0);  v[15] = rotate(( v[15] ^ v[0]), (ulong)64 - 16);  v[10] = ( v[10] +  v[15]);  v[5] = rotate(( v[5] ^  v[10]), (ulong)64 - 63);;\n"
        "v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 32);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 24); v[1] = (v[1] +  v[6] +  0);  v[12] = rotate(( v[12] ^ v[1]), (ulong)64 - 16);  v[11] = ( v[11] +  v[12]);  v[6] = rotate(( v[6] ^  v[11]), (ulong)64 - 63);;\n"
        "v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 32);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 24); v[2] = (v[2] +  v[7] +  0);   v[13] = rotate((  v[13] ^ v[2]), (ulong)64 - 16);  v[8] = ( v[8] +   v[13]);  v[7] = rotate(( v[7] ^  v[8]), (ulong)64 - 63);;\n"
        "v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 32);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 24); v[3] = (v[3] +  v[4] +  0);   v[14] = rotate((  v[14] ^ v[3]), (ulong)64 - 16);  v[9] = ( v[9] +   v[14]);  v[4] = rotate(( v[4] ^  v[9]), (ulong)64 - 63);;\n"
"\n"
        "// compress v into the blake state; this produces the 50-byte hash\n"
        "// (two Xi values)\n"
        "ulong h[7];\n"
        "h[0] = blake_state[0] ^ v[0] ^ v[8];\n"
        "h[1] = blake_state[1] ^ v[1] ^ v[9];\n"
        "h[2] = blake_state[2] ^ v[2] ^ v[10];\n"
        "h[3] = blake_state[3] ^ v[3] ^ v[11];\n"
        "h[4] = blake_state[4] ^ v[4] ^ v[12];\n"
        "h[5] = blake_state[5] ^ v[5] ^ v[13];\n"
        "h[6] = (blake_state[6] ^ v[6] ^ v[14]) & 0xffff;\n"
"\n"
        "// store the two Xi values in the hash table\n"
"\n"
        "dropped += ht_store(0, ht, input * 2,\n"
                "h[0],\n"
                "h[1],\n"
                "h[2],\n"
                "h[3]);\n"
        "dropped += ht_store(0, ht, input * 2 + 1,\n"
                "(h[3] >> 8) | (h[4] << (64 - 8)),\n"
                "(h[4] >> 8) | (h[5] << (64 - 8)),\n"
                "(h[5] >> 8) | (h[6] << (64 - 8)),\n"
                "(h[6] >> 8));\n"
"\n"
"\n"
"\n"
"\n"
        "input++;\n"
      "}\n"
"\n"
"    debug[tid * 2] = 0;\n"
    "debug[tid * 2 + 1] = dropped;\n"
"\n"
"}\n"
"\n"
"\n"
"# 401 \"input.cl\"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"ulong half_aligned_long(__global ulong *p, uint offset)\n"
"{\n"
    "return\n"
    "(((ulong)*(__global uint *)((__global char *)p + offset + 0)) << 0) |\n"
    "(((ulong)*(__global uint *)((__global char *)p + offset + 4)) << 32);\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"uint well_aligned_int(__global ulong *_p, uint offset)\n"
"{\n"
    "__global char *p = (__global char *)_p;\n"
    "return *(__global uint *)(p + offset);\n"
"}\n"
"\n"
"\n"
"# 440 \"input.cl\"\n"
"\n"
"uint xor_and_store(uint round, __global char *ht_dst, uint row,\n"
	"uint slot_a, uint slot_b, __global ulong *a, __global ulong *b)\n"
"{\n"
    "ulong	xi0, xi1, xi2;\n"
"\n"
"    // Note: for 20 == 20, for odd rounds, we could optimize by not\n"
    "// storing the byte containing bits from the previous (200 / (9 + 1)) block for\n"
    "if (round == 1 || round == 2)\n"
      "{\n"
	"// xor 24 bytes\n"
	"xi0 = *(a++) ^ *(b++);\n"
	"xi1 = *(a++) ^ *(b++);\n"
	"xi2 = *a ^ *b;\n"
	"if (round == 2)\n"
	  "{\n"
	    "// skip padding byte\n"
	    "xi0 = (xi0 >> 8) | (xi1 << (64 - 8));\n"
	    "xi1 = (xi1 >> 8) | (xi2 << (64 - 8));\n"
	    "xi2 = (xi2 >> 8);\n"
	  "}\n"
      "}\n"
    "else if (round == 3)\n"
      "{\n"
	"// xor 20 bytes\n"
	"xi0 = half_aligned_long(a, 0) ^ half_aligned_long(b, 0);\n"
	"xi1 = half_aligned_long(a, 8) ^ half_aligned_long(b, 8);\n"
	"xi2 = well_aligned_int(a, 16) ^ well_aligned_int(b, 16);\n"
      "}\n"
    "else if (round == 4 || round == 5)\n"
      "{\n"
	"// xor 16 bytes\n"
	"xi0 = half_aligned_long(a, 0) ^ half_aligned_long(b, 0);\n"
	"xi1 = half_aligned_long(a, 8) ^ half_aligned_long(b, 8);\n"
	"xi2 = 0;\n"
	"if (round == 4)\n"
	  "{\n"
	    "// skip padding byte\n"
	    "xi0 = (xi0 >> 8) | (xi1 << (64 - 8));\n"
	    "xi1 = (xi1 >> 8);\n"
	  "}\n"
      "}\n"
    "else if (round == 6)\n"
      "{\n"
	"// xor 12 bytes\n"
	"xi0 = *a++ ^ *b++;\n"
	"xi1 = *(__global uint *)a ^ *(__global uint *)b;\n"
	"xi2 = 0;\n"
	"if (round == 6)\n"
	  "{\n"
	    "// skip padding byte\n"
	    "xi0 = (xi0 >> 8) | (xi1 << (64 - 8));\n"
	    "xi1 = (xi1 >> 8);\n"
	  "}\n"
      "}\n"
    "else if (round == 7 || round == 8)\n"
      "{\n"
	"// xor 8 bytes\n"
	"xi0 = half_aligned_long(a, 0) ^ half_aligned_long(b, 0);\n"
	"xi1 = 0;\n"
	"xi2 = 0;\n"
	"if (round == 8)\n"
	  "{\n"
	    "// skip padding byte\n"
	    "xi0 = (xi0 >> 8);\n"
	  "}\n"
      "}\n"
    "// invalid solutions (which start happenning in round 5) have duplicate\n"
    "// inputs and xor to zero, so discard them\n"
    "if (!xi0 && !xi1)\n"
	"return 0;\n"
"\n"
"\n"
"\n"
"    return ht_store(round, ht_dst, ((row << 12) | (( slot_b & 0x3f) << 6) | ( slot_a & 0x3f)),\n"
	    "xi0, xi1, xi2, 0);\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"void equihash_round(uint round, __global char *ht_src, __global char *ht_dst,\n"
	"__global uint *debug)\n"
"{\n"
    "uint                tid = get_global_id(0);\n"
    "uint		tlid = get_local_id(0);\n"
    "__global char       *p;\n"
    "uint                cnt;\n"
    "uchar		first_words[((1 << (((200 / (9 + 1)) + 1) - 20)) * 9)];\n"
    "uchar		mask;\n"
    "uint                i, j;\n"
    "// ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) is already oversized (by a factor of 9), but we want to\n"
    "// make it even larger\n"
    "ushort		collisions[((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 3];\n"
    "uint                nr_coll = 0;\n"
    "uint                n;\n"
    "uint		dropped_coll = 0;\n"
    "uint		dropped_stor = 0;\n"
    "__global ulong      *a, *b;\n"
    "uint		xi_offset;\n"
    "// read first words of Xi from the previous (round - 1) hash table\n"
    "xi_offset = (8 + ((round - 1) / 2) * 4);\n"
    "// the mask is also computed to read data from the previous round\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"    mask = 0; \n"
"\n"
"\n"
"\n"
"    p = (ht_src + tid * ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 32);\n"
    "cnt = *(__global uint *)p;\n"
    "cnt = min(cnt, (uint)((1 << (((200 / (9 + 1)) + 1) - 20)) * 9)); // handle possible overflow in prev. round\n"
    "if (!cnt)\n"
	"// no elements in row, no collisions\n"
	"return ;\n"
"\n"
"    p += xi_offset;\n"
    "for (i = 0; i < cnt; i++, p += 32)\n"
        "first_words[i] = *(__global uchar *)p;\n"
"\n"
"    // find collisions\n"
    "for (i = 0; i < cnt; i++)\n"
        "for (j = i + 1; j < cnt; j++)\n"
"\n"
            "if ((first_words[i] & mask) ==\n"
		    "(first_words[j] & mask))\n"
              "{\n"
                "// collision!\n"
                "if (nr_coll >= sizeof (collisions) / sizeof (*collisions))\n"
                    "dropped_coll++;\n"
                "else\n"
"\n"
                    "// note: this assumes slots can be encoded in 8 bits\n"
                    "collisions[nr_coll++] =\n"
			"((ushort)j << 8) | ((ushort)i & 0xff);\n"
"\n"
"\n"
"\n"
              "}\n"
    "// XOR colliding pairs of Xi\n"
    "for (n = 0; n < nr_coll; n++)\n"
      "{\n"
        "i = collisions[n] & 0xff;\n"
        "j = collisions[n] >> 8;\n"
"\n"
"\n"
"\n"
        "a = (__global ulong *)\n"
            "(ht_src + tid * ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 32 + i * 32 + xi_offset);\n"
        "b = (__global ulong *)\n"
            "(ht_src + tid * ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 32 + j * 32 + xi_offset);\n"
	"dropped_stor += xor_and_store(round, ht_dst, tid, i, j, a, b);\n"
      "}\n"
    "if (round < 8)\n"
	"// reset the counter in preparation of the next round\n"
	"*(__global uint *)(ht_src + tid * ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 32) = 0;\n"
"\n"
"    debug[tid * 2] = dropped_coll;\n"
    "debug[tid * 2 + 1] = dropped_stor;\n"
"\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"    __kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round1 (__global char *ht_src, __global char *ht_dst,__global uint *debug) { equihash_round(1, ht_src, ht_dst, debug);}\n"
    "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round2 (__global char *ht_src, __global char *ht_dst,__global uint *debug) { equihash_round(2, ht_src, ht_dst, debug);}\n"
    "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round3 (__global char *ht_src, __global char *ht_dst,__global uint *debug) { equihash_round(3, ht_src, ht_dst, debug);}\n"
    "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round4 (__global char *ht_src, __global char *ht_dst,__global uint *debug) { equihash_round(4, ht_src, ht_dst, debug);}\n"
    "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round5 (__global char *ht_src, __global char *ht_dst,__global uint *debug) { equihash_round(5, ht_src, ht_dst, debug);}\n"
    "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round6 (__global char *ht_src, __global char *ht_dst,__global uint *debug) { equihash_round(6, ht_src, ht_dst, debug);}\n"
    "__kernel __attribute__((reqd_work_group_size(64, 1, 1))) void kernel_round7 (__global char *ht_src, __global char *ht_dst,__global uint *debug) { equihash_round(7, ht_src, ht_dst, debug);}\n"
"\n"
"// kernel_round8 takes an extra argument, \"sols\"\n"
"__kernel __attribute__((reqd_work_group_size(64, 1, 1)))\n"
"void kernel_round8(__global char *ht_src, __global char *ht_dst,\n"
	"__global uint *debug, __global sols_t *sols)\n"
"{\n"
    "uint                tid = get_global_id(0);\n"
    "equihash_round(8, ht_src, ht_dst, debug);\n"
    "if (!tid)\n"
	"sols->nr = sols->likely_invalids = 0;\n"
"}\n"
"\n"
"uint expand_ref(__global char *ht, uint xi_offset, uint row, uint slot)\n"
"{\n"
    "return *(__global uint *)(ht + row * ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 32 +\n"
	    "slot * 32 + xi_offset - 4);\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"uint expand_refs(uint *ins, uint nr_inputs, __global char **htabs,\n"
	"uint round)\n"
"{\n"
    "__global char	*ht = htabs[round % 2];\n"
    "uint		i = nr_inputs - 1;\n"
    "uint		j = nr_inputs * 2 - 1;\n"
    "uint		xi_offset = (8 + ((round) / 2) * 4);\n"
    "int			dup_to_watch = -1;\n"
    "do\n"
      "{\n"
	"ins[j] = expand_ref(ht, xi_offset,\n"
		"(ins[i] >> 12), ((ins[i] >> 6) & 0x3f));\n"
	"ins[j - 1] = expand_ref(ht, xi_offset,\n"
		"(ins[i] >> 12), (ins[i] & 0x3f));\n"
	"if (!round)\n"
	  "{\n"
	    "if (dup_to_watch == -1)\n"
		"dup_to_watch = ins[j];\n"
	    "else if (ins[j] == dup_to_watch || ins[j - 1] == dup_to_watch)\n"
		"return 0;\n"
	  "}\n"
	"if (!i)\n"
	    "break ;\n"
	"i--;\n"
	"j -= 2;\n"
      "}\n"
    "while (1);\n"
    "return 1;\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"\n"
"void potential_sol(__global char **htabs, __global sols_t *sols,\n"
	"uint ref0, uint ref1)\n"
"{\n"
    "uint	nr_values;\n"
    "uint	values_tmp[(1 << 9)];\n"
    "uint	sol_i;\n"
    "uint	i;\n"
    "nr_values = 0;\n"
    "values_tmp[nr_values++] = ref0;\n"
    "values_tmp[nr_values++] = ref1;\n"
    "uint round = 9 - 1;\n"
    "do\n"
      "{\n"
	"round--;\n"
	"if (!expand_refs(values_tmp, nr_values, htabs, round))\n"
	    "return ;\n"
	"nr_values *= 2;\n"
      "}\n"
    "while (round > 0);\n"
    "// solution appears valid, copy it to sols\n"
    "sol_i = atomic_inc(&sols->nr);\n"
    "if (sol_i >= 10)\n"
	"return ;\n"
    "for (i = 0; i < (1 << 9); i++)\n"
	"sols->values[sol_i][i] = values_tmp[i];\n"
    "sols->valid[sol_i] = 1;\n"
"}\n"
"\n"
"\n"
"\n"
"\n"
"__kernel\n"
"void kernel_sols(__global char *ht0, __global char *ht1, __global sols_t *sols)\n"
"{\n"
    "uint		tid = get_global_id(0);\n"
    "__global char	*htabs[2] = { ht0, ht1 };\n"
    "uint		ht_i = (9 - 1) % 2; // table filled at last round\n"
    "uint		cnt;\n"
    "uint		xi_offset = (8 + ((9 - 1) / 2) * 4);\n"
    "uint		i, j;\n"
    "__global char	*a, *b;\n"
    "uint		ref_i, ref_j;\n"
    "// it is ok for the collisions array to be so small, as if it fills up\n"
    "// the potential solutions are likely invalid (many duplicate inputs)\n"
    "ulong		collisions[1];\n"
    "uint		coll;\n"
"\n"
"    // in the final hash table, we are looking for a match on both the bits\n"
    "// part of the previous (200 / (9 + 1)) colliding bits, and the last (200 / (9 + 1)) bits.\n"
    "uint		mask = 0xffffff;\n"
"\n"
"\n"
"\n"
"    a = htabs[ht_i] + tid * ((1 << (((200 / (9 + 1)) + 1) - 20)) * 9) * 32;\n"
    "cnt = *(__global uint *)a;\n"
    "cnt = min(cnt, (uint)((1 << (((200 / (9 + 1)) + 1) - 20)) * 9)); // handle possible overflow in last round\n"
    "coll = 0;\n"
    "a += xi_offset;\n"
    "for (i = 0; i < cnt; i++, a += 32)\n"
	"for (j = i + 1, b = a + 32; j < cnt; j++, b += 32)\n"
	    "if (((*(__global uint *)a) & mask) ==\n"
		    "((*(__global uint *)b) & mask))\n"
	      "{\n"
		"ref_i = *(__global uint *)(a - 4);\n"
		"ref_j = *(__global uint *)(b - 4);\n"
		"if (coll < sizeof (collisions) / sizeof (*collisions))\n"
		    "collisions[coll++] = ((ulong)ref_i << 32) | ref_j;\n"
		"else\n"
		    "atomic_inc(&sols->likely_invalids);\n"
	      "}\n"
    "if (!coll)\n"
	"return ;\n"
    "for (i = 0; i < coll; i++)\n"
	"potential_sol(htabs, sols, collisions[i] >> 32,\n"
		"collisions[i] & 0xffffffff);\n"
"}\n"
"\n"
"\n";
//")_mrb_\";\n"
